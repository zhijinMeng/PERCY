#! /usr/bin/python3

import rospy
from gpt_server.srv import GPTGenerate, GPTGenerateRequest, GPTGenerateResponse
from openai import OpenAI
import json

class GPT:
    """
    ChatGPT server class.
    This will run in the background, waiting for a request to be made.
    GPT server accepts a string as request and outputs a string generated by ChatGPT.
    """

    def __init__(self):
        rospy.init_node('gpt_server')
        self.service = rospy.Service('gpt_generate', GPTGenerate, self.OnRequest)

        rospy.loginfo('GPT node started')

        # Here, initialize ChatGPT-3.5 Turbo
        
        self.client = OpenAI(api_key="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")

        API_KEY = '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'
        OpenAI.api_key = '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'
        self.messages = [ {"role": "system", 
                                "content":  "Have a conversation with me"} ] 

        ## file readings
        # json_file_path = '/home/ubuntu/pt0/src/gpt_server/scripts/profile.json'
        # try:
        #     with open(json_file_path, 'r') as file:
        #         self.messages = json.load(file)
        #         print('Successfully loaded JSON file:')
        #         print(self.messages)
        # except FileNotFoundError:
        #     print(f"Error: File not found at {json_file_path}")
        # except json.JSONDecodeError as e:
        #     print(f"Error decoding JSON: {e}")
        # self.messages.append({"role":"system","content":"ask me a question about my hobby."})

    def OnRequest(self, data: GPTGenerateRequest):
        text_from_speech = data.request  # Speech recognized by the user

        initialEmotion = data.initialEmotion
        finalEmotion = data.finalEmotion

        print(f'Receive emotions: {initialEmotion}, {finalEmotion}')

        input_text = {"role": "user", "content": text_from_speech}

        # Append the user's input to the conversation
        self.messages.append(input_text)

        # Get a response from ChatGPT-3.5 Turbo
        response = self.get_openai_response(self.messages)

        # Append the response to the conversation
        self.messages.append({"role": "assistant", "content": response})

        print(f'Received a request with a prompt:\n{input_text}')
        return response

    def get_openai_response(self, messages):
        chat = self.client.chat.completions.create(model="gpt-3.5-turbo", messages=messages)
        reply = chat.choices[0].message.content 
        return reply
        # return GPTGenerateResponse(response=reply)


if __name__ == '__main__':
    gpt = GPT()
    rospy.spin()
