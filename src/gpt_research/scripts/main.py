import rospy

from gpt_server.srv import GPTGenerate, GPTGenerateResponse  # Import GPT service definition
from hri_msgs.msg import LiveSpeech

from actionlib import SimpleActionClient
from pal_interaction_msgs.msg import TtsAction, TtsGoal

class Node:

    def __init__(self):
        rospy.init_node('gpt_research')

        # Connect to the GPT server.
        # From now one, when you want to receive response from chatgpt, you can do:
        # response = self.gptServer(prompt)
        self.gptServer = rospy.ServiceProxy('/gpt_generate', GPTGenerate)
        self.gptServer.wait_for_service()

        print('Successfully connected to /gpt_generate')


        # Subscribe to speech recognition topic. Whenever speech is received, OnSpeechReceived() is invoked.
        self.humanSpeech = rospy.Subscriber('/humans/voices/anonymous_speaker/speech', LiveSpeech, self.OnSpeechReceived)

        # Publish to /tts
        self.tts = SimpleActionClient('/tts', TtsAction)
        self.tts.wait_for_server()

        print('Successfully connected to /tts')

    
    def OnSpeechReceived(self, data:LiveSpeech):
        data.incremental

        # Only process when the user finished speaking.
        if len(data.final) > 0:
            print('Generating response for the following sentence:')
            print(data.final)
            # Generate response from ChatGPT and make the robot speak.
            response:GPTGenerateResponse
            response = self.gptServer(data.final)

            output = response.response  # The actual string generated by GPT

            # Publish to /tts, make the robot speak.
            msg = TtsGoal()
            msg.rawtext.lang_id = 'en_GB'
            msg.rawtext.text = output

            self.tts.send_goal_and_wait(msg)

            print('Generated Response:')
            print(output)

            print('done')


if __name__ == '__main__':
    node = Node()
    rospy.spin()