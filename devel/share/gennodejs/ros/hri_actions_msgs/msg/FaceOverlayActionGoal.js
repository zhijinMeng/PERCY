// Auto-generated. Do not edit!

// (in-package hri_actions_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let FaceOverlayGoal = require('./FaceOverlayGoal.js');
let std_msgs = _finder('std_msgs');
let actionlib_msgs = _finder('actionlib_msgs');

//-----------------------------------------------------------

class FaceOverlayActionGoal {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.header = null;
      this.goal_id = null;
      this.goal = null;
    }
    else {
      if (initObj.hasOwnProperty('header')) {
        this.header = initObj.header
      }
      else {
        this.header = new std_msgs.msg.Header();
      }
      if (initObj.hasOwnProperty('goal_id')) {
        this.goal_id = initObj.goal_id
      }
      else {
        this.goal_id = new actionlib_msgs.msg.GoalID();
      }
      if (initObj.hasOwnProperty('goal')) {
        this.goal = initObj.goal
      }
      else {
        this.goal = new FaceOverlayGoal();
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type FaceOverlayActionGoal
    // Serialize message field [header]
    bufferOffset = std_msgs.msg.Header.serialize(obj.header, buffer, bufferOffset);
    // Serialize message field [goal_id]
    bufferOffset = actionlib_msgs.msg.GoalID.serialize(obj.goal_id, buffer, bufferOffset);
    // Serialize message field [goal]
    bufferOffset = FaceOverlayGoal.serialize(obj.goal, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type FaceOverlayActionGoal
    let len;
    let data = new FaceOverlayActionGoal(null);
    // Deserialize message field [header]
    data.header = std_msgs.msg.Header.deserialize(buffer, bufferOffset);
    // Deserialize message field [goal_id]
    data.goal_id = actionlib_msgs.msg.GoalID.deserialize(buffer, bufferOffset);
    // Deserialize message field [goal]
    data.goal = FaceOverlayGoal.deserialize(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += std_msgs.msg.Header.getMessageSize(object.header);
    length += actionlib_msgs.msg.GoalID.getMessageSize(object.goal_id);
    length += FaceOverlayGoal.getMessageSize(object.goal);
    return length;
  }

  static datatype() {
    // Returns string type for a message object
    return 'hri_actions_msgs/FaceOverlayActionGoal';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '78d0b7ac0365fccb3f0b83dca8858497';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    Header header
    actionlib_msgs/GoalID goal_id
    FaceOverlayGoal goal
    
    ================================================================================
    MSG: std_msgs/Header
    # Standard metadata for higher-level stamped data types.
    # This is generally used to communicate timestamped data 
    # in a particular coordinate frame.
    # 
    # sequence ID: consecutively increasing ID 
    uint32 seq
    #Two-integer timestamp that is expressed as:
    # * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
    # * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
    # time-handling sugar is provided by the client library
    time stamp
    #Frame this data is associated with
    string frame_id
    
    ================================================================================
    MSG: actionlib_msgs/GoalID
    # The stamp should store the time at which this goal was requested.
    # It is used by an action server when it tries to preempt all
    # goals that were requested before a certain time
    time stamp
    
    # The id provides a way to associate feedback and
    # result message with specific goal requests. The id
    # specified must be unique.
    string id
    
    
    ================================================================================
    MSG: hri_actions_msgs/FaceOverlayGoal
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    
    # URL of the picture/animation to overlay on the face; currently only supports
    # absolute local path
    string media_url
    
    # duration, in seconds, of the overlay visibility
    # - if the duration is larger than the duration of the animation, the animation
    # will loop.
    # - a duration of 0 means 'forever'. In this case, the action *will never
    # complete* on its own. Cancelling the action will remove the overlay from the
    # face.
    float32 duration
    
    
    ###############################################
    ## LAYER
    
    # display the image in the background (the eye's iris/pupil will be drawn on
    # top of the overlay
    uint8 BACKGROUND=0
    # display the image on top of the eye (the eye's iris/pupil will be occluded by
    # the image, except where transparent)
    uint8 FOREGROUND=1
    
    # one of BACKGROUND or FOREGROUND
    uint8 layer
    
    ###############################################
    ## LAYOUT
    
    # extend the provided image to cover both eyes.
    # Note: this typically is the only sensible option for robot with a single face panel
    uint8 EXTEND=0
    # on robots with 2 panels (one per eye), copy the provided image onto each eye
    uint8 COPY=1
    #  on robots with 2 panels (one per eye), mirror the provided image onto each eyes (symmetry over the vertical axis)
    uint8 MIRROR=2
    # on robots with 2 panels (one per eye), only display the image on the left eye
    uint8 LEFT_EYE_ONLY=3
    # on robots with 2 panels (one per eye), only display the image on the right eye
    uint8 RIGHT_EYE_ONLY=4
    
    # one of the layout constant defined above
    uint8 layout
    
    
    # scale of the image: 1.0 (default) means full width of the face/eye (depending
    # on the chosen layout); 0.1 means 10% of the width.
    # Note that any value <= 0.0 is ignored (replaced by 1.0)
    float32 scale
    
    # position offset, expressed as a proportion of the face or eye's width/height. Values
    # in [-1.0, 1.0] range.
    #
    # (0.0, 0.0) means that the image is centered with the face/eye
    # (-1.0, 1.0) means that the image's center would be located in the top left
    # corner of the face/eye panel.
    float32 offset_x
    float32 offset_y
    
    ###############################################
    ## EFFECTS
    
    # if true, the overlay will fade in/fade out
    bool fade
    
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new FaceOverlayActionGoal(null);
    if (msg.header !== undefined) {
      resolved.header = std_msgs.msg.Header.Resolve(msg.header)
    }
    else {
      resolved.header = new std_msgs.msg.Header()
    }

    if (msg.goal_id !== undefined) {
      resolved.goal_id = actionlib_msgs.msg.GoalID.Resolve(msg.goal_id)
    }
    else {
      resolved.goal_id = new actionlib_msgs.msg.GoalID()
    }

    if (msg.goal !== undefined) {
      resolved.goal = FaceOverlayGoal.Resolve(msg.goal)
    }
    else {
      resolved.goal = new FaceOverlayGoal()
    }

    return resolved;
    }
};

module.exports = FaceOverlayActionGoal;
