;; Auto-generated. Do not edit!


(when (boundp 'hri_actions_msgs::FaceOverlayAction)
  (if (not (find-package "HRI_ACTIONS_MSGS"))
    (make-package "HRI_ACTIONS_MSGS"))
  (shadow 'FaceOverlayAction (find-package "HRI_ACTIONS_MSGS")))
(unless (find-package "HRI_ACTIONS_MSGS::FACEOVERLAYACTION")
  (make-package "HRI_ACTIONS_MSGS::FACEOVERLAYACTION"))

(in-package "ROS")
;;//! \htmlinclude FaceOverlayAction.msg.html


(defclass hri_actions_msgs::FaceOverlayAction
  :super ros::object
  :slots (_action_goal _action_result _action_feedback ))

(defmethod hri_actions_msgs::FaceOverlayAction
  (:init
   (&key
    ((:action_goal __action_goal) (instance hri_actions_msgs::FaceOverlayActionGoal :init))
    ((:action_result __action_result) (instance hri_actions_msgs::FaceOverlayActionResult :init))
    ((:action_feedback __action_feedback) (instance hri_actions_msgs::FaceOverlayActionFeedback :init))
    )
   (send-super :init)
   (setq _action_goal __action_goal)
   (setq _action_result __action_result)
   (setq _action_feedback __action_feedback)
   self)
  (:action_goal
   (&rest __action_goal)
   (if (keywordp (car __action_goal))
       (send* _action_goal __action_goal)
     (progn
       (if __action_goal (setq _action_goal (car __action_goal)))
       _action_goal)))
  (:action_result
   (&rest __action_result)
   (if (keywordp (car __action_result))
       (send* _action_result __action_result)
     (progn
       (if __action_result (setq _action_result (car __action_result)))
       _action_result)))
  (:action_feedback
   (&rest __action_feedback)
   (if (keywordp (car __action_feedback))
       (send* _action_feedback __action_feedback)
     (progn
       (if __action_feedback (setq _action_feedback (car __action_feedback)))
       _action_feedback)))
  (:serialization-length
   ()
   (+
    ;; hri_actions_msgs/FaceOverlayActionGoal _action_goal
    (send _action_goal :serialization-length)
    ;; hri_actions_msgs/FaceOverlayActionResult _action_result
    (send _action_result :serialization-length)
    ;; hri_actions_msgs/FaceOverlayActionFeedback _action_feedback
    (send _action_feedback :serialization-length)
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; hri_actions_msgs/FaceOverlayActionGoal _action_goal
       (send _action_goal :serialize s)
     ;; hri_actions_msgs/FaceOverlayActionResult _action_result
       (send _action_result :serialize s)
     ;; hri_actions_msgs/FaceOverlayActionFeedback _action_feedback
       (send _action_feedback :serialize s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; hri_actions_msgs/FaceOverlayActionGoal _action_goal
     (send _action_goal :deserialize buf ptr-) (incf ptr- (send _action_goal :serialization-length))
   ;; hri_actions_msgs/FaceOverlayActionResult _action_result
     (send _action_result :deserialize buf ptr-) (incf ptr- (send _action_result :serialization-length))
   ;; hri_actions_msgs/FaceOverlayActionFeedback _action_feedback
     (send _action_feedback :deserialize buf ptr-) (incf ptr- (send _action_feedback :serialization-length))
   ;;
   self)
  )

(setf (get hri_actions_msgs::FaceOverlayAction :md5sum-) "8f61684e206363bfd1066b6cbc9de109")
(setf (get hri_actions_msgs::FaceOverlayAction :datatype-) "hri_actions_msgs/FaceOverlayAction")
(setf (get hri_actions_msgs::FaceOverlayAction :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

FaceOverlayActionGoal action_goal
FaceOverlayActionResult action_result
FaceOverlayActionFeedback action_feedback

================================================================================
MSG: hri_actions_msgs/FaceOverlayActionGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalID goal_id
FaceOverlayGoal goal

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: actionlib_msgs/GoalID
# The stamp should store the time at which this goal was requested.
# It is used by an action server when it tries to preempt all
# goals that were requested before a certain time
time stamp

# The id provides a way to associate feedback and
# result message with specific goal requests. The id
# specified must be unique.
string id


================================================================================
MSG: hri_actions_msgs/FaceOverlayGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


# URL of the picture/animation to overlay on the face; currently only supports
# absolute local path
string media_url

# duration, in seconds, of the overlay visibility
# - if the duration is larger than the duration of the animation, the animation
# will loop.
# - a duration of 0 means 'forever'. In this case, the action *will never
# complete* on its own. Cancelling the action will remove the overlay from the
# face.
float32 duration


###############################################
## LAYER

# display the image in the background (the eye's iris/pupil will be drawn on
# top of the overlay
uint8 BACKGROUND=0
# display the image on top of the eye (the eye's iris/pupil will be occluded by
# the image, except where transparent)
uint8 FOREGROUND=1

# one of BACKGROUND or FOREGROUND
uint8 layer

###############################################
## LAYOUT

# extend the provided image to cover both eyes.
# Note: this typically is the only sensible option for robot with a single face panel
uint8 EXTEND=0
# on robots with 2 panels (one per eye), copy the provided image onto each eye
uint8 COPY=1
#  on robots with 2 panels (one per eye), mirror the provided image onto each eyes (symmetry over the vertical axis)
uint8 MIRROR=2
# on robots with 2 panels (one per eye), only display the image on the left eye
uint8 LEFT_EYE_ONLY=3
# on robots with 2 panels (one per eye), only display the image on the right eye
uint8 RIGHT_EYE_ONLY=4

# one of the layout constant defined above
uint8 layout


# scale of the image: 1.0 (default) means full width of the face/eye (depending
# on the chosen layout); 0.1 means 10% of the width.
# Note that any value <= 0.0 is ignored (replaced by 1.0)
float32 scale

# position offset, expressed as a proportion of the face or eye's width/height. Values
# in [-1.0, 1.0] range.
#
# (0.0, 0.0) means that the image is centered with the face/eye
# (-1.0, 1.0) means that the image's center would be located in the top left
# corner of the face/eye panel.
float32 offset_x
float32 offset_y

###############################################
## EFFECTS

# if true, the overlay will fade in/fade out
bool fade


================================================================================
MSG: hri_actions_msgs/FaceOverlayActionResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
FaceOverlayResult result

================================================================================
MSG: actionlib_msgs/GoalStatus
GoalID goal_id
uint8 status
uint8 PENDING         = 0   # The goal has yet to be processed by the action server
uint8 ACTIVE          = 1   # The goal is currently being processed by the action server
uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing
                            #   and has since completed its execution (Terminal State)
uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)
uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due
                            #    to some failure (Terminal State)
uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,
                            #    because the goal was unattainable or invalid (Terminal State)
uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing
                            #    and has not yet completed execution
uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,
                            #    but the action server has not yet confirmed that the goal is canceled
uint8 RECALLED        = 8   # The goal received a cancel request before it started executing
                            #    and was successfully cancelled (Terminal State)
uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be
                            #    sent over the wire by an action server

#Allow for the user to associate a string with GoalStatus for debugging
string text


================================================================================
MSG: hri_actions_msgs/FaceOverlayResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

================================================================================
MSG: hri_actions_msgs/FaceOverlayActionFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
FaceOverlayFeedback feedback

================================================================================
MSG: hri_actions_msgs/FaceOverlayFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======



")



(provide :hri_actions_msgs/FaceOverlayAction "8f61684e206363bfd1066b6cbc9de109")


