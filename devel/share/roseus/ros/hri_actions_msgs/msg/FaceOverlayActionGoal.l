;; Auto-generated. Do not edit!


(when (boundp 'hri_actions_msgs::FaceOverlayActionGoal)
  (if (not (find-package "HRI_ACTIONS_MSGS"))
    (make-package "HRI_ACTIONS_MSGS"))
  (shadow 'FaceOverlayActionGoal (find-package "HRI_ACTIONS_MSGS")))
(unless (find-package "HRI_ACTIONS_MSGS::FACEOVERLAYACTIONGOAL")
  (make-package "HRI_ACTIONS_MSGS::FACEOVERLAYACTIONGOAL"))

(in-package "ROS")
;;//! \htmlinclude FaceOverlayActionGoal.msg.html
(if (not (find-package "ACTIONLIB_MSGS"))
  (ros::roseus-add-msgs "actionlib_msgs"))
(if (not (find-package "STD_MSGS"))
  (ros::roseus-add-msgs "std_msgs"))


(defclass hri_actions_msgs::FaceOverlayActionGoal
  :super ros::object
  :slots (_header _goal_id _goal ))

(defmethod hri_actions_msgs::FaceOverlayActionGoal
  (:init
   (&key
    ((:header __header) (instance std_msgs::Header :init))
    ((:goal_id __goal_id) (instance actionlib_msgs::GoalID :init))
    ((:goal __goal) (instance hri_actions_msgs::FaceOverlayGoal :init))
    )
   (send-super :init)
   (setq _header __header)
   (setq _goal_id __goal_id)
   (setq _goal __goal)
   self)
  (:header
   (&rest __header)
   (if (keywordp (car __header))
       (send* _header __header)
     (progn
       (if __header (setq _header (car __header)))
       _header)))
  (:goal_id
   (&rest __goal_id)
   (if (keywordp (car __goal_id))
       (send* _goal_id __goal_id)
     (progn
       (if __goal_id (setq _goal_id (car __goal_id)))
       _goal_id)))
  (:goal
   (&rest __goal)
   (if (keywordp (car __goal))
       (send* _goal __goal)
     (progn
       (if __goal (setq _goal (car __goal)))
       _goal)))
  (:serialization-length
   ()
   (+
    ;; std_msgs/Header _header
    (send _header :serialization-length)
    ;; actionlib_msgs/GoalID _goal_id
    (send _goal_id :serialization-length)
    ;; hri_actions_msgs/FaceOverlayGoal _goal
    (send _goal :serialization-length)
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; std_msgs/Header _header
       (send _header :serialize s)
     ;; actionlib_msgs/GoalID _goal_id
       (send _goal_id :serialize s)
     ;; hri_actions_msgs/FaceOverlayGoal _goal
       (send _goal :serialize s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; std_msgs/Header _header
     (send _header :deserialize buf ptr-) (incf ptr- (send _header :serialization-length))
   ;; actionlib_msgs/GoalID _goal_id
     (send _goal_id :deserialize buf ptr-) (incf ptr- (send _goal_id :serialization-length))
   ;; hri_actions_msgs/FaceOverlayGoal _goal
     (send _goal :deserialize buf ptr-) (incf ptr- (send _goal :serialization-length))
   ;;
   self)
  )

(setf (get hri_actions_msgs::FaceOverlayActionGoal :md5sum-) "78d0b7ac0365fccb3f0b83dca8858497")
(setf (get hri_actions_msgs::FaceOverlayActionGoal :datatype-) "hri_actions_msgs/FaceOverlayActionGoal")
(setf (get hri_actions_msgs::FaceOverlayActionGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalID goal_id
FaceOverlayGoal goal

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: actionlib_msgs/GoalID
# The stamp should store the time at which this goal was requested.
# It is used by an action server when it tries to preempt all
# goals that were requested before a certain time
time stamp

# The id provides a way to associate feedback and
# result message with specific goal requests. The id
# specified must be unique.
string id


================================================================================
MSG: hri_actions_msgs/FaceOverlayGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


# URL of the picture/animation to overlay on the face; currently only supports
# absolute local path
string media_url

# duration, in seconds, of the overlay visibility
# - if the duration is larger than the duration of the animation, the animation
# will loop.
# - a duration of 0 means 'forever'. In this case, the action *will never
# complete* on its own. Cancelling the action will remove the overlay from the
# face.
float32 duration


###############################################
## LAYER

# display the image in the background (the eye's iris/pupil will be drawn on
# top of the overlay
uint8 BACKGROUND=0
# display the image on top of the eye (the eye's iris/pupil will be occluded by
# the image, except where transparent)
uint8 FOREGROUND=1

# one of BACKGROUND or FOREGROUND
uint8 layer

###############################################
## LAYOUT

# extend the provided image to cover both eyes.
# Note: this typically is the only sensible option for robot with a single face panel
uint8 EXTEND=0
# on robots with 2 panels (one per eye), copy the provided image onto each eye
uint8 COPY=1
#  on robots with 2 panels (one per eye), mirror the provided image onto each eyes (symmetry over the vertical axis)
uint8 MIRROR=2
# on robots with 2 panels (one per eye), only display the image on the left eye
uint8 LEFT_EYE_ONLY=3
# on robots with 2 panels (one per eye), only display the image on the right eye
uint8 RIGHT_EYE_ONLY=4

# one of the layout constant defined above
uint8 layout


# scale of the image: 1.0 (default) means full width of the face/eye (depending
# on the chosen layout); 0.1 means 10% of the width.
# Note that any value <= 0.0 is ignored (replaced by 1.0)
float32 scale

# position offset, expressed as a proportion of the face or eye's width/height. Values
# in [-1.0, 1.0] range.
#
# (0.0, 0.0) means that the image is centered with the face/eye
# (-1.0, 1.0) means that the image's center would be located in the top left
# corner of the face/eye panel.
float32 offset_x
float32 offset_y

###############################################
## EFFECTS

# if true, the overlay will fade in/fade out
bool fade


")



(provide :hri_actions_msgs/FaceOverlayActionGoal "78d0b7ac0365fccb3f0b83dca8858497")


