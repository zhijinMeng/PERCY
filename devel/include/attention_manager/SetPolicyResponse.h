// Generated by gencpp from file attention_manager/SetPolicyResponse.msg
// DO NOT EDIT!


#ifndef ATTENTION_MANAGER_MESSAGE_SETPOLICYRESPONSE_H
#define ATTENTION_MANAGER_MESSAGE_SETPOLICYRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace attention_manager
{
template <class ContainerAllocator>
struct SetPolicyResponse_
{
  typedef SetPolicyResponse_<ContainerAllocator> Type;

  SetPolicyResponse_()
    : success(false)
    , error_msg()  {
    }
  SetPolicyResponse_(const ContainerAllocator& _alloc)
    : success(false)
    , error_msg(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _success_type;
  _success_type success;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _error_msg_type;
  _error_msg_type error_msg;





  typedef boost::shared_ptr< ::attention_manager::SetPolicyResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::attention_manager::SetPolicyResponse_<ContainerAllocator> const> ConstPtr;

}; // struct SetPolicyResponse_

typedef ::attention_manager::SetPolicyResponse_<std::allocator<void> > SetPolicyResponse;

typedef boost::shared_ptr< ::attention_manager::SetPolicyResponse > SetPolicyResponsePtr;
typedef boost::shared_ptr< ::attention_manager::SetPolicyResponse const> SetPolicyResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::attention_manager::SetPolicyResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::attention_manager::SetPolicyResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::attention_manager::SetPolicyResponse_<ContainerAllocator1> & lhs, const ::attention_manager::SetPolicyResponse_<ContainerAllocator2> & rhs)
{
  return lhs.success == rhs.success &&
    lhs.error_msg == rhs.error_msg;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::attention_manager::SetPolicyResponse_<ContainerAllocator1> & lhs, const ::attention_manager::SetPolicyResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace attention_manager

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::attention_manager::SetPolicyResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::attention_manager::SetPolicyResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::attention_manager::SetPolicyResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::attention_manager::SetPolicyResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::attention_manager::SetPolicyResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::attention_manager::SetPolicyResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::attention_manager::SetPolicyResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d006c48be24db1173a071ca9af4c8179";
  }

  static const char* value(const ::attention_manager::SetPolicyResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd006c48be24db117ULL;
  static const uint64_t static_value2 = 0x3a071ca9af4c8179ULL;
};

template<class ContainerAllocator>
struct DataType< ::attention_manager::SetPolicyResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "attention_manager/SetPolicyResponse";
  }

  static const char* value(const ::attention_manager::SetPolicyResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::attention_manager::SetPolicyResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Result:\n"
"\n"
"# true if the action was successfully performed\n"
"bool success\n"
"\n"
"# if success = False, error_msg might contain additional information about the\n"
"# failure.\n"
"string error_msg\n"
"\n"
"\n"
;
  }

  static const char* value(const ::attention_manager::SetPolicyResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::attention_manager::SetPolicyResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.success);
      stream.next(m.error_msg);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetPolicyResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::attention_manager::SetPolicyResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::attention_manager::SetPolicyResponse_<ContainerAllocator>& v)
  {
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
    s << indent << "error_msg: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.error_msg);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ATTENTION_MANAGER_MESSAGE_SETPOLICYRESPONSE_H
