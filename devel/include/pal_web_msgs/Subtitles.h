// Generated by gencpp from file pal_web_msgs/Subtitles.msg
// DO NOT EDIT!


#ifndef PAL_WEB_MSGS_MESSAGE_SUBTITLES_H
#define PAL_WEB_MSGS_MESSAGE_SUBTITLES_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pal_web_msgs
{
template <class ContainerAllocator>
struct Subtitles_
{
  typedef Subtitles_<ContainerAllocator> Type;

  Subtitles_()
    : text()
    , type()
    , new(false)  {
    }
  Subtitles_(const ContainerAllocator& _alloc)
    : text(_alloc)
    , type(_alloc)
    , new(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _text_type;
  _text_type text;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _type_type;
  _type_type type;

   typedef uint8_t _new_type;
  _new_type new;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(TTS_TYPE)
  #undef TTS_TYPE
#endif
#if defined(_WIN32) && defined(ASR_TYPE)
  #undef ASR_TYPE
#endif


  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> TTS_TYPE;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> ASR_TYPE;

  typedef boost::shared_ptr< ::pal_web_msgs::Subtitles_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pal_web_msgs::Subtitles_<ContainerAllocator> const> ConstPtr;

}; // struct Subtitles_

typedef ::pal_web_msgs::Subtitles_<std::allocator<void> > Subtitles;

typedef boost::shared_ptr< ::pal_web_msgs::Subtitles > SubtitlesPtr;
typedef boost::shared_ptr< ::pal_web_msgs::Subtitles const> SubtitlesConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      Subtitles_<ContainerAllocator>::TTS_TYPE =
        
          "tts"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      Subtitles_<ContainerAllocator>::ASR_TYPE =
        
          "asr"
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pal_web_msgs::Subtitles_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pal_web_msgs::Subtitles_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pal_web_msgs::Subtitles_<ContainerAllocator1> & lhs, const ::pal_web_msgs::Subtitles_<ContainerAllocator2> & rhs)
{
  return lhs.text == rhs.text &&
    lhs.type == rhs.type &&
    lhs.new == rhs.new;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pal_web_msgs::Subtitles_<ContainerAllocator1> & lhs, const ::pal_web_msgs::Subtitles_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pal_web_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pal_web_msgs::Subtitles_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pal_web_msgs::Subtitles_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pal_web_msgs::Subtitles_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pal_web_msgs::Subtitles_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pal_web_msgs::Subtitles_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pal_web_msgs::Subtitles_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pal_web_msgs::Subtitles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "564a1471f4beddb38c913b4bd30baba4";
  }

  static const char* value(const ::pal_web_msgs::Subtitles_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x564a1471f4beddb3ULL;
  static const uint64_t static_value2 = 0x8c913b4bd30baba4ULL;
};

template<class ContainerAllocator>
struct DataType< ::pal_web_msgs::Subtitles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pal_web_msgs/Subtitles";
  }

  static const char* value(const ::pal_web_msgs::Subtitles_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pal_web_msgs::Subtitles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string TTS_TYPE=tts\n"
"string ASR_TYPE=asr\n"
"\n"
"string text\n"
"string type\n"
"bool new\n"
;
  }

  static const char* value(const ::pal_web_msgs::Subtitles_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pal_web_msgs::Subtitles_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.text);
      stream.next(m.type);
      stream.next(m.new);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Subtitles_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pal_web_msgs::Subtitles_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pal_web_msgs::Subtitles_<ContainerAllocator>& v)
  {
    s << indent << "text: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.text);
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.type);
    s << indent << "new: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.new);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PAL_WEB_MSGS_MESSAGE_SUBTITLES_H
