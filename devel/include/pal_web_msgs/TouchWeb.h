// Generated by gencpp from file pal_web_msgs/TouchWeb.msg
// DO NOT EDIT!


#ifndef PAL_WEB_MSGS_MESSAGE_TOUCHWEB_H
#define PAL_WEB_MSGS_MESSAGE_TOUCHWEB_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pal_web_msgs
{
template <class ContainerAllocator>
struct TouchWeb_
{
  typedef TouchWeb_<ContainerAllocator> Type;

  TouchWeb_()
    : touch_web()
    , touch_project()
    , parameters()
    , success(false)
    , message()  {
    }
  TouchWeb_(const ContainerAllocator& _alloc)
    : touch_web(_alloc)
    , touch_project(_alloc)
    , parameters(_alloc)
    , success(false)
    , message(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _touch_web_type;
  _touch_web_type touch_web;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _touch_project_type;
  _touch_project_type touch_project;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _parameters_type;
  _parameters_type parameters;

   typedef uint8_t _success_type;
  _success_type success;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _message_type;
  _message_type message;





  typedef boost::shared_ptr< ::pal_web_msgs::TouchWeb_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pal_web_msgs::TouchWeb_<ContainerAllocator> const> ConstPtr;

}; // struct TouchWeb_

typedef ::pal_web_msgs::TouchWeb_<std::allocator<void> > TouchWeb;

typedef boost::shared_ptr< ::pal_web_msgs::TouchWeb > TouchWebPtr;
typedef boost::shared_ptr< ::pal_web_msgs::TouchWeb const> TouchWebConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pal_web_msgs::TouchWeb_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pal_web_msgs::TouchWeb_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pal_web_msgs::TouchWeb_<ContainerAllocator1> & lhs, const ::pal_web_msgs::TouchWeb_<ContainerAllocator2> & rhs)
{
  return lhs.touch_web == rhs.touch_web &&
    lhs.touch_project == rhs.touch_project &&
    lhs.parameters == rhs.parameters &&
    lhs.success == rhs.success &&
    lhs.message == rhs.message;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pal_web_msgs::TouchWeb_<ContainerAllocator1> & lhs, const ::pal_web_msgs::TouchWeb_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pal_web_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pal_web_msgs::TouchWeb_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pal_web_msgs::TouchWeb_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pal_web_msgs::TouchWeb_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pal_web_msgs::TouchWeb_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pal_web_msgs::TouchWeb_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pal_web_msgs::TouchWeb_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pal_web_msgs::TouchWeb_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e5d87a5338aad48717af83218b03759b";
  }

  static const char* value(const ::pal_web_msgs::TouchWeb_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe5d87a5338aad487ULL;
  static const uint64_t static_value2 = 0x17af83218b03759bULL;
};

template<class ContainerAllocator>
struct DataType< ::pal_web_msgs::TouchWeb_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pal_web_msgs/TouchWeb";
  }

  static const char* value(const ::pal_web_msgs::TouchWeb_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pal_web_msgs::TouchWeb_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string touch_web\n"
"string touch_project\n"
"string parameters\n"
"\n"
"# Optional fields for error messages\n"
"bool success\n"
"string message\n"
;
  }

  static const char* value(const ::pal_web_msgs::TouchWeb_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pal_web_msgs::TouchWeb_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.touch_web);
      stream.next(m.touch_project);
      stream.next(m.parameters);
      stream.next(m.success);
      stream.next(m.message);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TouchWeb_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pal_web_msgs::TouchWeb_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pal_web_msgs::TouchWeb_<ContainerAllocator>& v)
  {
    s << indent << "touch_web: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.touch_web);
    s << indent << "touch_project: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.touch_project);
    s << indent << "parameters: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.parameters);
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
    s << indent << "message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.message);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PAL_WEB_MSGS_MESSAGE_TOUCHWEB_H
