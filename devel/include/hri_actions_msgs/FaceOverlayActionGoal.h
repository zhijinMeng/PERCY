// Generated by gencpp from file hri_actions_msgs/FaceOverlayActionGoal.msg
// DO NOT EDIT!


#ifndef HRI_ACTIONS_MSGS_MESSAGE_FACEOVERLAYACTIONGOAL_H
#define HRI_ACTIONS_MSGS_MESSAGE_FACEOVERLAYACTIONGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <actionlib_msgs/GoalID.h>
#include <hri_actions_msgs/FaceOverlayGoal.h>

namespace hri_actions_msgs
{
template <class ContainerAllocator>
struct FaceOverlayActionGoal_
{
  typedef FaceOverlayActionGoal_<ContainerAllocator> Type;

  FaceOverlayActionGoal_()
    : header()
    , goal_id()
    , goal()  {
    }
  FaceOverlayActionGoal_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , goal_id(_alloc)
    , goal(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::actionlib_msgs::GoalID_<ContainerAllocator>  _goal_id_type;
  _goal_id_type goal_id;

   typedef  ::hri_actions_msgs::FaceOverlayGoal_<ContainerAllocator>  _goal_type;
  _goal_type goal;





  typedef boost::shared_ptr< ::hri_actions_msgs::FaceOverlayActionGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hri_actions_msgs::FaceOverlayActionGoal_<ContainerAllocator> const> ConstPtr;

}; // struct FaceOverlayActionGoal_

typedef ::hri_actions_msgs::FaceOverlayActionGoal_<std::allocator<void> > FaceOverlayActionGoal;

typedef boost::shared_ptr< ::hri_actions_msgs::FaceOverlayActionGoal > FaceOverlayActionGoalPtr;
typedef boost::shared_ptr< ::hri_actions_msgs::FaceOverlayActionGoal const> FaceOverlayActionGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hri_actions_msgs::FaceOverlayActionGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hri_actions_msgs::FaceOverlayActionGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hri_actions_msgs::FaceOverlayActionGoal_<ContainerAllocator1> & lhs, const ::hri_actions_msgs::FaceOverlayActionGoal_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.goal_id == rhs.goal_id &&
    lhs.goal == rhs.goal;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hri_actions_msgs::FaceOverlayActionGoal_<ContainerAllocator1> & lhs, const ::hri_actions_msgs::FaceOverlayActionGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hri_actions_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hri_actions_msgs::FaceOverlayActionGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hri_actions_msgs::FaceOverlayActionGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hri_actions_msgs::FaceOverlayActionGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hri_actions_msgs::FaceOverlayActionGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hri_actions_msgs::FaceOverlayActionGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hri_actions_msgs::FaceOverlayActionGoal_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hri_actions_msgs::FaceOverlayActionGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "78d0b7ac0365fccb3f0b83dca8858497";
  }

  static const char* value(const ::hri_actions_msgs::FaceOverlayActionGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x78d0b7ac0365fccbULL;
  static const uint64_t static_value2 = 0x3f0b83dca8858497ULL;
};

template<class ContainerAllocator>
struct DataType< ::hri_actions_msgs::FaceOverlayActionGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hri_actions_msgs/FaceOverlayActionGoal";
  }

  static const char* value(const ::hri_actions_msgs::FaceOverlayActionGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hri_actions_msgs::FaceOverlayActionGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"\n"
"Header header\n"
"actionlib_msgs/GoalID goal_id\n"
"FaceOverlayGoal goal\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: actionlib_msgs/GoalID\n"
"# The stamp should store the time at which this goal was requested.\n"
"# It is used by an action server when it tries to preempt all\n"
"# goals that were requested before a certain time\n"
"time stamp\n"
"\n"
"# The id provides a way to associate feedback and\n"
"# result message with specific goal requests. The id\n"
"# specified must be unique.\n"
"string id\n"
"\n"
"\n"
"================================================================================\n"
"MSG: hri_actions_msgs/FaceOverlayGoal\n"
"# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"\n"
"\n"
"# URL of the picture/animation to overlay on the face; currently only supports\n"
"# absolute local path\n"
"string media_url\n"
"\n"
"# duration, in seconds, of the overlay visibility\n"
"# - if the duration is larger than the duration of the animation, the animation\n"
"# will loop.\n"
"# - a duration of 0 means 'forever'. In this case, the action *will never\n"
"# complete* on its own. Cancelling the action will remove the overlay from the\n"
"# face.\n"
"float32 duration\n"
"\n"
"\n"
"###############################################\n"
"## LAYER\n"
"\n"
"# display the image in the background (the eye's iris/pupil will be drawn on\n"
"# top of the overlay\n"
"uint8 BACKGROUND=0\n"
"# display the image on top of the eye (the eye's iris/pupil will be occluded by\n"
"# the image, except where transparent)\n"
"uint8 FOREGROUND=1\n"
"\n"
"# one of BACKGROUND or FOREGROUND\n"
"uint8 layer\n"
"\n"
"###############################################\n"
"## LAYOUT\n"
"\n"
"# extend the provided image to cover both eyes.\n"
"# Note: this typically is the only sensible option for robot with a single face panel\n"
"uint8 EXTEND=0\n"
"# on robots with 2 panels (one per eye), copy the provided image onto each eye\n"
"uint8 COPY=1\n"
"#  on robots with 2 panels (one per eye), mirror the provided image onto each eyes (symmetry over the vertical axis)\n"
"uint8 MIRROR=2\n"
"# on robots with 2 panels (one per eye), only display the image on the left eye\n"
"uint8 LEFT_EYE_ONLY=3\n"
"# on robots with 2 panels (one per eye), only display the image on the right eye\n"
"uint8 RIGHT_EYE_ONLY=4\n"
"\n"
"# one of the layout constant defined above\n"
"uint8 layout\n"
"\n"
"\n"
"# scale of the image: 1.0 (default) means full width of the face/eye (depending\n"
"# on the chosen layout); 0.1 means 10% of the width.\n"
"# Note that any value <= 0.0 is ignored (replaced by 1.0)\n"
"float32 scale\n"
"\n"
"# position offset, expressed as a proportion of the face or eye's width/height. Values\n"
"# in [-1.0, 1.0] range.\n"
"#\n"
"# (0.0, 0.0) means that the image is centered with the face/eye\n"
"# (-1.0, 1.0) means that the image's center would be located in the top left\n"
"# corner of the face/eye panel.\n"
"float32 offset_x\n"
"float32 offset_y\n"
"\n"
"###############################################\n"
"## EFFECTS\n"
"\n"
"# if true, the overlay will fade in/fade out\n"
"bool fade\n"
"\n"
;
  }

  static const char* value(const ::hri_actions_msgs::FaceOverlayActionGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hri_actions_msgs::FaceOverlayActionGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.goal_id);
      stream.next(m.goal);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FaceOverlayActionGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hri_actions_msgs::FaceOverlayActionGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hri_actions_msgs::FaceOverlayActionGoal_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "goal_id: ";
    s << std::endl;
    Printer< ::actionlib_msgs::GoalID_<ContainerAllocator> >::stream(s, indent + "  ", v.goal_id);
    s << indent << "goal: ";
    s << std::endl;
    Printer< ::hri_actions_msgs::FaceOverlayGoal_<ContainerAllocator> >::stream(s, indent + "  ", v.goal);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HRI_ACTIONS_MSGS_MESSAGE_FACEOVERLAYACTIONGOAL_H
