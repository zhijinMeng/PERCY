// Generated by gencpp from file hri_actions_msgs/FaceOverlayGoal.msg
// DO NOT EDIT!


#ifndef HRI_ACTIONS_MSGS_MESSAGE_FACEOVERLAYGOAL_H
#define HRI_ACTIONS_MSGS_MESSAGE_FACEOVERLAYGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hri_actions_msgs
{
template <class ContainerAllocator>
struct FaceOverlayGoal_
{
  typedef FaceOverlayGoal_<ContainerAllocator> Type;

  FaceOverlayGoal_()
    : media_url()
    , duration(0.0)
    , layer(0)
    , layout(0)
    , scale(0.0)
    , offset_x(0.0)
    , offset_y(0.0)
    , fade(false)  {
    }
  FaceOverlayGoal_(const ContainerAllocator& _alloc)
    : media_url(_alloc)
    , duration(0.0)
    , layer(0)
    , layout(0)
    , scale(0.0)
    , offset_x(0.0)
    , offset_y(0.0)
    , fade(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _media_url_type;
  _media_url_type media_url;

   typedef float _duration_type;
  _duration_type duration;

   typedef uint8_t _layer_type;
  _layer_type layer;

   typedef uint8_t _layout_type;
  _layout_type layout;

   typedef float _scale_type;
  _scale_type scale;

   typedef float _offset_x_type;
  _offset_x_type offset_x;

   typedef float _offset_y_type;
  _offset_y_type offset_y;

   typedef uint8_t _fade_type;
  _fade_type fade;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(BACKGROUND)
  #undef BACKGROUND
#endif
#if defined(_WIN32) && defined(FOREGROUND)
  #undef FOREGROUND
#endif
#if defined(_WIN32) && defined(EXTEND)
  #undef EXTEND
#endif
#if defined(_WIN32) && defined(COPY)
  #undef COPY
#endif
#if defined(_WIN32) && defined(MIRROR)
  #undef MIRROR
#endif
#if defined(_WIN32) && defined(LEFT_EYE_ONLY)
  #undef LEFT_EYE_ONLY
#endif
#if defined(_WIN32) && defined(RIGHT_EYE_ONLY)
  #undef RIGHT_EYE_ONLY
#endif

  enum {
    BACKGROUND = 0u,
    FOREGROUND = 1u,
    EXTEND = 0u,
    COPY = 1u,
    MIRROR = 2u,
    LEFT_EYE_ONLY = 3u,
    RIGHT_EYE_ONLY = 4u,
  };


  typedef boost::shared_ptr< ::hri_actions_msgs::FaceOverlayGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hri_actions_msgs::FaceOverlayGoal_<ContainerAllocator> const> ConstPtr;

}; // struct FaceOverlayGoal_

typedef ::hri_actions_msgs::FaceOverlayGoal_<std::allocator<void> > FaceOverlayGoal;

typedef boost::shared_ptr< ::hri_actions_msgs::FaceOverlayGoal > FaceOverlayGoalPtr;
typedef boost::shared_ptr< ::hri_actions_msgs::FaceOverlayGoal const> FaceOverlayGoalConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hri_actions_msgs::FaceOverlayGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hri_actions_msgs::FaceOverlayGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hri_actions_msgs::FaceOverlayGoal_<ContainerAllocator1> & lhs, const ::hri_actions_msgs::FaceOverlayGoal_<ContainerAllocator2> & rhs)
{
  return lhs.media_url == rhs.media_url &&
    lhs.duration == rhs.duration &&
    lhs.layer == rhs.layer &&
    lhs.layout == rhs.layout &&
    lhs.scale == rhs.scale &&
    lhs.offset_x == rhs.offset_x &&
    lhs.offset_y == rhs.offset_y &&
    lhs.fade == rhs.fade;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hri_actions_msgs::FaceOverlayGoal_<ContainerAllocator1> & lhs, const ::hri_actions_msgs::FaceOverlayGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hri_actions_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hri_actions_msgs::FaceOverlayGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hri_actions_msgs::FaceOverlayGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hri_actions_msgs::FaceOverlayGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hri_actions_msgs::FaceOverlayGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hri_actions_msgs::FaceOverlayGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hri_actions_msgs::FaceOverlayGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hri_actions_msgs::FaceOverlayGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "953d334319802dfd447bdb6867044fd8";
  }

  static const char* value(const ::hri_actions_msgs::FaceOverlayGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x953d334319802dfdULL;
  static const uint64_t static_value2 = 0x447bdb6867044fd8ULL;
};

template<class ContainerAllocator>
struct DataType< ::hri_actions_msgs::FaceOverlayGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hri_actions_msgs/FaceOverlayGoal";
  }

  static const char* value(const ::hri_actions_msgs::FaceOverlayGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hri_actions_msgs::FaceOverlayGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"\n"
"\n"
"# URL of the picture/animation to overlay on the face; currently only supports\n"
"# absolute local path\n"
"string media_url\n"
"\n"
"# duration, in seconds, of the overlay visibility\n"
"# - if the duration is larger than the duration of the animation, the animation\n"
"# will loop.\n"
"# - a duration of 0 means 'forever'. In this case, the action *will never\n"
"# complete* on its own. Cancelling the action will remove the overlay from the\n"
"# face.\n"
"float32 duration\n"
"\n"
"\n"
"###############################################\n"
"## LAYER\n"
"\n"
"# display the image in the background (the eye's iris/pupil will be drawn on\n"
"# top of the overlay\n"
"uint8 BACKGROUND=0\n"
"# display the image on top of the eye (the eye's iris/pupil will be occluded by\n"
"# the image, except where transparent)\n"
"uint8 FOREGROUND=1\n"
"\n"
"# one of BACKGROUND or FOREGROUND\n"
"uint8 layer\n"
"\n"
"###############################################\n"
"## LAYOUT\n"
"\n"
"# extend the provided image to cover both eyes.\n"
"# Note: this typically is the only sensible option for robot with a single face panel\n"
"uint8 EXTEND=0\n"
"# on robots with 2 panels (one per eye), copy the provided image onto each eye\n"
"uint8 COPY=1\n"
"#  on robots with 2 panels (one per eye), mirror the provided image onto each eyes (symmetry over the vertical axis)\n"
"uint8 MIRROR=2\n"
"# on robots with 2 panels (one per eye), only display the image on the left eye\n"
"uint8 LEFT_EYE_ONLY=3\n"
"# on robots with 2 panels (one per eye), only display the image on the right eye\n"
"uint8 RIGHT_EYE_ONLY=4\n"
"\n"
"# one of the layout constant defined above\n"
"uint8 layout\n"
"\n"
"\n"
"# scale of the image: 1.0 (default) means full width of the face/eye (depending\n"
"# on the chosen layout); 0.1 means 10% of the width.\n"
"# Note that any value <= 0.0 is ignored (replaced by 1.0)\n"
"float32 scale\n"
"\n"
"# position offset, expressed as a proportion of the face or eye's width/height. Values\n"
"# in [-1.0, 1.0] range.\n"
"#\n"
"# (0.0, 0.0) means that the image is centered with the face/eye\n"
"# (-1.0, 1.0) means that the image's center would be located in the top left\n"
"# corner of the face/eye panel.\n"
"float32 offset_x\n"
"float32 offset_y\n"
"\n"
"###############################################\n"
"## EFFECTS\n"
"\n"
"# if true, the overlay will fade in/fade out\n"
"bool fade\n"
"\n"
;
  }

  static const char* value(const ::hri_actions_msgs::FaceOverlayGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hri_actions_msgs::FaceOverlayGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.media_url);
      stream.next(m.duration);
      stream.next(m.layer);
      stream.next(m.layout);
      stream.next(m.scale);
      stream.next(m.offset_x);
      stream.next(m.offset_y);
      stream.next(m.fade);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FaceOverlayGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hri_actions_msgs::FaceOverlayGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hri_actions_msgs::FaceOverlayGoal_<ContainerAllocator>& v)
  {
    s << indent << "media_url: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.media_url);
    s << indent << "duration: ";
    Printer<float>::stream(s, indent + "  ", v.duration);
    s << indent << "layer: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.layer);
    s << indent << "layout: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.layout);
    s << indent << "scale: ";
    Printer<float>::stream(s, indent + "  ", v.scale);
    s << indent << "offset_x: ";
    Printer<float>::stream(s, indent + "  ", v.offset_x);
    s << indent << "offset_y: ";
    Printer<float>::stream(s, indent + "  ", v.offset_y);
    s << indent << "fade: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fade);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HRI_ACTIONS_MSGS_MESSAGE_FACEOVERLAYGOAL_H
