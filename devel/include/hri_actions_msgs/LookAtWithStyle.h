// Generated by gencpp from file hri_actions_msgs/LookAtWithStyle.msg
// DO NOT EDIT!


#ifndef HRI_ACTIONS_MSGS_MESSAGE_LOOKATWITHSTYLE_H
#define HRI_ACTIONS_MSGS_MESSAGE_LOOKATWITHSTYLE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PointStamped.h>

namespace hri_actions_msgs
{
template <class ContainerAllocator>
struct LookAtWithStyle_
{
  typedef LookAtWithStyle_<ContainerAllocator> Type;

  LookAtWithStyle_()
    : style(0)
    , target()  {
    }
  LookAtWithStyle_(const ContainerAllocator& _alloc)
    : style(0)
    , target(_alloc)  {
  (void)_alloc;
    }



   typedef int8_t _style_type;
  _style_type style;

   typedef  ::geometry_msgs::PointStamped_<ContainerAllocator>  _target_type;
  _target_type target;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(DEFAULT)
  #undef DEFAULT
#endif
#if defined(_WIN32) && defined(EYES_ONLY)
  #undef EYES_ONLY
#endif
#if defined(_WIN32) && defined(HEAD_ONLY)
  #undef HEAD_ONLY
#endif

  enum {
    DEFAULT = 0,
    EYES_ONLY = 1,
    HEAD_ONLY = 2,
  };


  typedef boost::shared_ptr< ::hri_actions_msgs::LookAtWithStyle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hri_actions_msgs::LookAtWithStyle_<ContainerAllocator> const> ConstPtr;

}; // struct LookAtWithStyle_

typedef ::hri_actions_msgs::LookAtWithStyle_<std::allocator<void> > LookAtWithStyle;

typedef boost::shared_ptr< ::hri_actions_msgs::LookAtWithStyle > LookAtWithStylePtr;
typedef boost::shared_ptr< ::hri_actions_msgs::LookAtWithStyle const> LookAtWithStyleConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hri_actions_msgs::LookAtWithStyle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hri_actions_msgs::LookAtWithStyle_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hri_actions_msgs::LookAtWithStyle_<ContainerAllocator1> & lhs, const ::hri_actions_msgs::LookAtWithStyle_<ContainerAllocator2> & rhs)
{
  return lhs.style == rhs.style &&
    lhs.target == rhs.target;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hri_actions_msgs::LookAtWithStyle_<ContainerAllocator1> & lhs, const ::hri_actions_msgs::LookAtWithStyle_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hri_actions_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hri_actions_msgs::LookAtWithStyle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hri_actions_msgs::LookAtWithStyle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hri_actions_msgs::LookAtWithStyle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hri_actions_msgs::LookAtWithStyle_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hri_actions_msgs::LookAtWithStyle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hri_actions_msgs::LookAtWithStyle_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hri_actions_msgs::LookAtWithStyle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1997f720101069b0d5f7306d6cb70706";
  }

  static const char* value(const ::hri_actions_msgs::LookAtWithStyle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1997f720101069b0ULL;
  static const uint64_t static_value2 = 0xd5f7306d6cb70706ULL;
};

template<class ContainerAllocator>
struct DataType< ::hri_actions_msgs::LookAtWithStyle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hri_actions_msgs/LookAtWithStyle";
  }

  static const char* value(const ::hri_actions_msgs::LookAtWithStyle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hri_actions_msgs::LookAtWithStyle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Specify the target of the robot's gaze as a 3D point. A desired 'style'\n"
"# policy can be specified to control how the gaze motion should be executed\n"
"# (for instance, sudden movement, slow shift, etc.)\n"
"\n"
"# default policy: both eyes and head joints (eg neck) are used, the resulting\n"
"# 'style' is a smooth combination of both\n"
"int8 DEFAULT = 0\n"
"\n"
"# eyes-only policy: only the eyes (if available) should move\n"
"int8 EYES_ONLY = 1\n"
"\n"
"# head-only policy: only the head joints (typically, the neck) should move\n"
"int8 HEAD_ONLY = 2\n"
"\n"
"int8 style\n"
"\n"
"geometry_msgs/PointStamped target\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PointStamped\n"
"# This represents a Point with reference coordinate frame and timestamp\n"
"Header header\n"
"Point point\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::hri_actions_msgs::LookAtWithStyle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hri_actions_msgs::LookAtWithStyle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.style);
      stream.next(m.target);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LookAtWithStyle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hri_actions_msgs::LookAtWithStyle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hri_actions_msgs::LookAtWithStyle_<ContainerAllocator>& v)
  {
    s << indent << "style: ";
    Printer<int8_t>::stream(s, indent + "  ", v.style);
    s << indent << "target: ";
    s << std::endl;
    Printer< ::geometry_msgs::PointStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.target);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HRI_ACTIONS_MSGS_MESSAGE_LOOKATWITHSTYLE_H
