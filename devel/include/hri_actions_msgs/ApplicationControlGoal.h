// Generated by gencpp from file hri_actions_msgs/ApplicationControlGoal.msg
// DO NOT EDIT!


#ifndef HRI_ACTIONS_MSGS_MESSAGE_APPLICATIONCONTROLGOAL_H
#define HRI_ACTIONS_MSGS_MESSAGE_APPLICATIONCONTROLGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hri_actions_msgs
{
template <class ContainerAllocator>
struct ApplicationControlGoal_
{
  typedef ApplicationControlGoal_<ContainerAllocator> Type;

  ApplicationControlGoal_()
    : parameters()  {
    }
  ApplicationControlGoal_(const ContainerAllocator& _alloc)
    : parameters(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _parameters_type;
  _parameters_type parameters;





  typedef boost::shared_ptr< ::hri_actions_msgs::ApplicationControlGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hri_actions_msgs::ApplicationControlGoal_<ContainerAllocator> const> ConstPtr;

}; // struct ApplicationControlGoal_

typedef ::hri_actions_msgs::ApplicationControlGoal_<std::allocator<void> > ApplicationControlGoal;

typedef boost::shared_ptr< ::hri_actions_msgs::ApplicationControlGoal > ApplicationControlGoalPtr;
typedef boost::shared_ptr< ::hri_actions_msgs::ApplicationControlGoal const> ApplicationControlGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hri_actions_msgs::ApplicationControlGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hri_actions_msgs::ApplicationControlGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hri_actions_msgs::ApplicationControlGoal_<ContainerAllocator1> & lhs, const ::hri_actions_msgs::ApplicationControlGoal_<ContainerAllocator2> & rhs)
{
  return lhs.parameters == rhs.parameters;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hri_actions_msgs::ApplicationControlGoal_<ContainerAllocator1> & lhs, const ::hri_actions_msgs::ApplicationControlGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hri_actions_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hri_actions_msgs::ApplicationControlGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hri_actions_msgs::ApplicationControlGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hri_actions_msgs::ApplicationControlGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hri_actions_msgs::ApplicationControlGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hri_actions_msgs::ApplicationControlGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hri_actions_msgs::ApplicationControlGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hri_actions_msgs::ApplicationControlGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b96cd7929ab82d8413ba620379c440ce";
  }

  static const char* value(const ::hri_actions_msgs::ApplicationControlGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb96cd7929ab82d84ULL;
  static const uint64_t static_value2 = 0x13ba620379c440ceULL;
};

template<class ContainerAllocator>
struct DataType< ::hri_actions_msgs::ApplicationControlGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hri_actions_msgs/ApplicationControlGoal";
  }

  static const char* value(const ::hri_actions_msgs::ApplicationControlGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hri_actions_msgs::ApplicationControlGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# an (optional) JSON-encoded string passed to the underlying application\n"
"# controller.\n"
"string parameters\n"
;
  }

  static const char* value(const ::hri_actions_msgs::ApplicationControlGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hri_actions_msgs::ApplicationControlGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.parameters);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ApplicationControlGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hri_actions_msgs::ApplicationControlGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hri_actions_msgs::ApplicationControlGoal_<ContainerAllocator>& v)
  {
    s << indent << "parameters: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.parameters);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HRI_ACTIONS_MSGS_MESSAGE_APPLICATIONCONTROLGOAL_H
