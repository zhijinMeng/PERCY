// Generated by gencpp from file hri_actions_msgs/Intent.msg
// DO NOT EDIT!


#ifndef HRI_ACTIONS_MSGS_MESSAGE_INTENT_H
#define HRI_ACTIONS_MSGS_MESSAGE_INTENT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hri_actions_msgs
{
template <class ContainerAllocator>
struct Intent_
{
  typedef Intent_<ContainerAllocator> Type;

  Intent_()
    : intent()
    , data()
    , source()
    , modality()
    , priority(0)
    , confidence(0.0)  {
    }
  Intent_(const ContainerAllocator& _alloc)
    : intent(_alloc)
    , data(_alloc)
    , source(_alloc)
    , modality(_alloc)
    , priority(0)
    , confidence(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _intent_type;
  _intent_type intent;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _data_type;
  _data_type data;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _source_type;
  _source_type source;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _modality_type;
  _modality_type modality;

   typedef uint8_t _priority_type;
  _priority_type priority;

   typedef float _confidence_type;
  _confidence_type confidence;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(ENGAGE_WITH)
  #undef ENGAGE_WITH
#endif
#if defined(_WIN32) && defined(MOVE_TO)
  #undef MOVE_TO
#endif
#if defined(_WIN32) && defined(GUIDE)
  #undef GUIDE
#endif
#if defined(_WIN32) && defined(GRAB_OBJECT)
  #undef GRAB_OBJECT
#endif
#if defined(_WIN32) && defined(BRING_OBJECT)
  #undef BRING_OBJECT
#endif
#if defined(_WIN32) && defined(PLACE_OBJECT)
  #undef PLACE_OBJECT
#endif
#if defined(_WIN32) && defined(GREET)
  #undef GREET
#endif
#if defined(_WIN32) && defined(SAY)
  #undef SAY
#endif
#if defined(_WIN32) && defined(PRESENT_CONTENT)
  #undef PRESENT_CONTENT
#endif
#if defined(_WIN32) && defined(PERFORM_MOTION)
  #undef PERFORM_MOTION
#endif
#if defined(_WIN32) && defined(START_ACTIVITY)
  #undef START_ACTIVITY
#endif
#if defined(_WIN32) && defined(STOP_ACTIVITY)
  #undef STOP_ACTIVITY
#endif
#if defined(_WIN32) && defined(ROBOT_ITSELF)
  #undef ROBOT_ITSELF
#endif
#if defined(_WIN32) && defined(REMOTE_SUPERVISOR)
  #undef REMOTE_SUPERVISOR
#endif
#if defined(_WIN32) && defined(UNKNOWN_AGENT)
  #undef UNKNOWN_AGENT
#endif
#if defined(_WIN32) && defined(UNKNOWN)
  #undef UNKNOWN
#endif
#if defined(_WIN32) && defined(MODALITY_SPEECH)
  #undef MODALITY_SPEECH
#endif
#if defined(_WIN32) && defined(MODALITY_MOTION)
  #undef MODALITY_MOTION
#endif
#if defined(_WIN32) && defined(MODALITY_TOUCHSCREEN)
  #undef MODALITY_TOUCHSCREEN
#endif
#if defined(_WIN32) && defined(MODALITY_OTHER)
  #undef MODALITY_OTHER
#endif
#if defined(_WIN32) && defined(MODALITY_INTERNAL)
  #undef MODALITY_INTERNAL
#endif


  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> ENGAGE_WITH;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> MOVE_TO;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> GUIDE;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> GRAB_OBJECT;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> BRING_OBJECT;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> PLACE_OBJECT;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> GREET;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> SAY;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> PRESENT_CONTENT;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> PERFORM_MOTION;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> START_ACTIVITY;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> STOP_ACTIVITY;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> ROBOT_ITSELF;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> REMOTE_SUPERVISOR;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> UNKNOWN_AGENT;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> UNKNOWN;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> MODALITY_SPEECH;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> MODALITY_MOTION;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> MODALITY_TOUCHSCREEN;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> MODALITY_OTHER;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> MODALITY_INTERNAL;

  typedef boost::shared_ptr< ::hri_actions_msgs::Intent_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hri_actions_msgs::Intent_<ContainerAllocator> const> ConstPtr;

}; // struct Intent_

typedef ::hri_actions_msgs::Intent_<std::allocator<void> > Intent;

typedef boost::shared_ptr< ::hri_actions_msgs::Intent > IntentPtr;
typedef boost::shared_ptr< ::hri_actions_msgs::Intent const> IntentConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      Intent_<ContainerAllocator>::ENGAGE_WITH =
        
          "__intent_engage_with__"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      Intent_<ContainerAllocator>::MOVE_TO =
        
          "__intent_move_to__"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      Intent_<ContainerAllocator>::GUIDE =
        
          "__intent_guide__"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      Intent_<ContainerAllocator>::GRAB_OBJECT =
        
          "__intent_grab_object__"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      Intent_<ContainerAllocator>::BRING_OBJECT =
        
          "__intent_bring_object__"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      Intent_<ContainerAllocator>::PLACE_OBJECT =
        
          "__intent_place_object__"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      Intent_<ContainerAllocator>::GREET =
        
          "__intent_greet__"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      Intent_<ContainerAllocator>::SAY =
        
          "__intent_say__"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      Intent_<ContainerAllocator>::PRESENT_CONTENT =
        
          "__intent_present_content__"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      Intent_<ContainerAllocator>::PERFORM_MOTION =
        
          "__intent_perform_motion__"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      Intent_<ContainerAllocator>::START_ACTIVITY =
        
          "__intent_start_activity__"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      Intent_<ContainerAllocator>::STOP_ACTIVITY =
        
          "__intent_stop_activity__"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      Intent_<ContainerAllocator>::ROBOT_ITSELF =
        
          "__myself__"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      Intent_<ContainerAllocator>::REMOTE_SUPERVISOR =
        
          "__remote_supervisor__"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      Intent_<ContainerAllocator>::UNKNOWN_AGENT =
        
          "__unknown_agent__"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      Intent_<ContainerAllocator>::UNKNOWN =
        
          "__unknown__"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      Intent_<ContainerAllocator>::MODALITY_SPEECH =
        
          "__modality_speech__"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      Intent_<ContainerAllocator>::MODALITY_MOTION =
        
          "__modality_motion__"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      Intent_<ContainerAllocator>::MODALITY_TOUCHSCREEN =
        
          "__modality_touchscreen__"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      Intent_<ContainerAllocator>::MODALITY_OTHER =
        
          "__modality_other__"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      Intent_<ContainerAllocator>::MODALITY_INTERNAL =
        
          "__modality_internal__"
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hri_actions_msgs::Intent_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hri_actions_msgs::Intent_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hri_actions_msgs::Intent_<ContainerAllocator1> & lhs, const ::hri_actions_msgs::Intent_<ContainerAllocator2> & rhs)
{
  return lhs.intent == rhs.intent &&
    lhs.data == rhs.data &&
    lhs.source == rhs.source &&
    lhs.modality == rhs.modality &&
    lhs.priority == rhs.priority &&
    lhs.confidence == rhs.confidence;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hri_actions_msgs::Intent_<ContainerAllocator1> & lhs, const ::hri_actions_msgs::Intent_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hri_actions_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hri_actions_msgs::Intent_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hri_actions_msgs::Intent_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hri_actions_msgs::Intent_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hri_actions_msgs::Intent_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hri_actions_msgs::Intent_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hri_actions_msgs::Intent_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hri_actions_msgs::Intent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d183d4f69bb3932549578b85c6f6c1b0";
  }

  static const char* value(const ::hri_actions_msgs::Intent_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd183d4f69bb39325ULL;
  static const uint64_t static_value2 = 0x49578b85c6f6c1b0ULL;
};

template<class ContainerAllocator>
struct DataType< ::hri_actions_msgs::Intent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hri_actions_msgs/Intent";
  }

  static const char* value(const ::hri_actions_msgs::Intent_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hri_actions_msgs::Intent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# An intent is an abstract description of an operation to be performed by the\n"
"# robot.\n"
"#\n"
"# While inspired by the Android intents\n"
"# (https://developer.android.com/reference/android/content/Intent), ROS intents\n"
"# are primarily designed to capture user-initiated intents. For instance, a\n"
"# button click on a touchscreen, the result of a chatbot-based verbal\n"
"# interaction, a command started by a remote user interface.\n"
"#\n"
"# Intents comprise of two mandatory fields: the `intent`, which should be one\n"
"# of the available predefined intents, and the `data` which must be a JSON\n"
"# object containing the data required to fully instantiate the intent.  While\n"
"# the exact content of the JSON object is up to the application, the following\n"
"# standard keys can be used to specify the intent's semantic roles (also called\n"
"# thematic roles or theta roles):\n"
"#\n"
"# - `agent`: the agent expected to perform the intent (if omitted, the robot\n"
"# itself is assumed)\n"
"# - `object` (also named *theme* or *patient* in the linguistics literature): entity\n"
"# undergoing the effect of the intent\n"
"# - `goal`: entity towards which the intent is directed or moves\n"
"# - `recipient`: entity that receives the object (denoted as the `theme`)\n"
"#\n"
"# Examples:\n"
"# \n"
"# - \"I want you to go to the kitchen\":\n"
"#   - intent: `move_to`\n"
"#   - data: {\"goal\":\"kitchen_1\"}\n"
"#\n"
"# - \"Can you take the groceries to Luke in the kitchen?\"\n"
"#   - intent: `bring`\n"
"#   - data: {\"object\": \"groceries\",\n"
"#            \"goal\":\"kitchen_1\",\n"
"#            \"recipient\": \"person_luke\"}\n"
"\n"
"##########################################################################\n"
"#  Intent name\n"
"#\n"
"# A string describing the intent.\n"
"#\n"
"# Where suitable, the intent SHOULD be one of the constant defined below.\n"
"# However, we recognise that the list of intents is possibly large. Therefore,\n"
"# custom strings are also permissible. If you believe your intent name should\n"
"# be standardised and added to the list of pre-defined intents, fill the\n"
"# corresponding entry in the \"thematic roles\" table below and submit a pull\n"
"# request on this repository.\n"
"string intent\n"
"\n"
"# 'intent' constants\n"
"# see table below for a short description of each.\n"
"\n"
"string ENGAGE_WITH = __intent_engage_with__\n"
"string MOVE_TO = __intent_move_to__\n"
"string GUIDE = __intent_guide__\n"
"string GRAB_OBJECT = __intent_grab_object__\n"
"string BRING_OBJECT = __intent_bring_object__\n"
"string PLACE_OBJECT = __intent_place_object__\n"
"string GREET = __intent_greet__\n"
"string SAY = __intent_say__\n"
"string PRESENT_CONTENT = __intent_present_content__\n"
"string PERFORM_MOTION = __intent_perform_motion__\n"
"string START_ACTIVITY = __intent_start_activity__\n"
"string STOP_ACTIVITY = __intent_stop_activity__\n"
"\n"
"##########################################################################\n"
"#  Intent data\n"
"#\n"
"# a JSON object containing the data required to fully instantiate the intent.\n"
"# The keys of the object should be one of the thematic role defined above, or\n"
"# the general `other_data`.\n"
"#\n"
"# Each intent defines a specific set of required and optional thematic roles,\n"
"# listed in the following table (note that the `agent` role can be optionally\n"
"# added to all intents, and is omitted from the table for clarity):\n"
"#\n"
"# .. [please keep the RST table syntax below, as it is used to automatically parse the list of intents by some nodes]#\n"
"# .. BEGIN_INTENTS_TABLE\n"
"# +------------------+-----------------------------------------------------------------------------+-------------------------------------------------------------+---------------------------------------------------------------------------+\n"
"# | **Intent**       | **Description**                                                             | **Required thematic roles**                                 | **Optional thematic roles**                                               |\n"
"# +==================+=============================================================================+=============================================================+===========================================================================+\n"
"# | `ENGAGE_WITH`    | an agent wants to engage with another one                                   | - `recipient`                                               |                                                                           |\n"
"# +------------------+-----------------------------------------------------------------------------+-------------------------------------------------------------+---------------------------------------------------------------------------+\n"
"# | `MOVE_TO`        | navigates to a specific location                                            | - `goal`                                                    |                                                                           |\n"
"# +------------------+-----------------------------------------------------------------------------+-------------------------------------------------------------+---------------------------------------------------------------------------+\n"
"# | `GUIDE`          | guides someone somewhere                                                    | - `goal`                                                    |                                                                           |\n"
"# |                  |                                                                             | - `recipient`                                               |                                                                           |\n"
"# +------------------+-----------------------------------------------------------------------------+-------------------------------------------------------------+---------------------------------------------------------------------------+\n"
"# | `GRAB_OBJECT`    | pick-up a specific object                                                   | - `object`                                                  |                                                                           |\n"
"# +------------------+-----------------------------------------------------------------------------+-------------------------------------------------------------+---------------------------------------------------------------------------+\n"
"# | `BRING_OBJECT`   | bring a specific object to a specific place                                 | - `object`                                                  |                                                                           |\n"
"# |                  |                                                                             | - `recipient`                                               |                                                                           |\n"
"# +------------------+-----------------------------------------------------------------------------+-------------------------------------------------------------+---------------------------------------------------------------------------+\n"
"# | `PLACE_OBJECT`   | put an object on a support (eg a table)                                     | - `recipient`                                               | - `object` (only required if more that one object could be placed)        |\n"
"# +------------------+-----------------------------------------------------------------------------+-------------------------------------------------------------+---------------------------------------------------------------------------+\n"
"# | `GREET`          | greet an agent                                                              | - `recipient`                                               |                                                                           |\n"
"# +------------------+-----------------------------------------------------------------------------+-------------------------------------------------------------+---------------------------------------------------------------------------+\n"
"# | `SAY`            | says some text, optionally annotated with gestures or expressions           | - `object` (the text to say)                                | - `recipient`                                                             |\n"
"# +------------------+-----------------------------------------------------------------------------+-------------------------------------------------------------+---------------------------------------------------------------------------+\n"
"# | `PRESENT_CONTENT`| present (via a screen, pre-recorded text...) predefined content             | - `object` (the content identifier)                         | - `recipient`                                                             |\n"
"# +------------------+-----------------------------------------------------------------------------+-------------------------------------------------------------+---------------------------------------------------------------------------+\n"
"# | `PERFORM_MOTION` | performs a motion (eg, a dance or a specific gesture like pointing, waving) | - `object` (the system-specific name of the motion/gesture) | - `recipient`                                                             |\n"
"# +------------------+-----------------------------------------------------------------------------+-------------------------------------------------------------+---------------------------------------------------------------------------+\n"
"# | `START_ACTIVITY` | start a scripted behaviour/activity                                         | - `object` (the name of the activity)                       | - any additional parameter required to start the activity                 |\n"
"# +------------------+-----------------------------------------------------------------------------+-------------------------------------------------------------+---------------------------------------------------------------------------+\n"
"# | `STOP_ACTIVITY`  | request cancelation of an activity                                          |                                                             | - `object` (the name of the activity. If unset, current main activity)    |\n"
"# +------------------+-----------------------------------------------------------------------------+-------------------------------------------------------------+---------------------------------------------------------------------------+\n"
"# .. END_INTENTS_TABLE\n"
"#\n"
"string data\n"
"\n"
"##########################################################################\n"
"#  Intent source\n"
"#\n"
"# a string describing the source of the intent. This is *not* the node\n"
"# which published the intent, but instead the actual agent who expressed the\n"
"# intent/command/desire.\n"
"# `source` can be either one of the constant below, or the specific id of the\n"
"# person/agent expressing the intent. In a REP-155 compliant system, this ID\n"
"# must be the person ID of the agent.\n"
"string source\n"
"\n"
"# 'source' constants:\n"
"\n"
"# for intents originating from the robot itself\n"
"string ROBOT_ITSELF = __myself__\n"
"# for intents originating from a external robot control system (for instance, a remote control tablet)\n"
"string REMOTE_SUPERVISOR = __remote_supervisor__\n"
"# for intents coming from an agent interacting with the robot, but not uniquely\n"
"# identified\n"
"string UNKNOWN_AGENT = __unknown_agent__\n"
"# for unknown sources\n"
"string UNKNOWN = __unknown__\n"
"\n"
"\n"
"##########################################################################\n"
"#  Intent modality\n"
"#\n"
"# modality used to originally convey the intent: verbal, via the touchscreen,\n"
"# via a gesture...\n"
"# The special modality MODALITY_INTERNAL must be used for intents coming for the\n"
"# robot's internal processes (eg 'battery low, I need to charge')\n"
"# MUST be one of the MODALITY_ constant below.\n"
"string modality\n"
"\n"
"# 'modality' constants:\n"
"\n"
"string MODALITY_SPEECH = __modality_speech__\n"
"# both gestures (eg waving) and displacement (eg approaching)\n"
"string MODALITY_MOTION = __modality_motion__\n"
"string MODALITY_TOUCHSCREEN = __modality_touchscreen__\n"
"string MODALITY_OTHER = __modality_other__\n"
"string MODALITY_INTERNAL = __modality_internal__\n"
"\n"
"\n"
"##########################################################################\n"
"#  Intent priority\n"
"#\n"
"# the priority of this intent. This MIGHT be used as a hint by the robot's task\n"
"# scheduler, however is scheduler is *not* forced to respect this priority\n"
"# level. 0 is the lowest priority, 128 is the default priority, 255 is the\n"
"# highest priority.\n"
"uint8 priority\n"
"\n"
"##########################################################################\n"
"#  Intent confidence\n"
"#\n"
"# a value between 0.0 (no confidence) and 1.0 (full confidence) that the intent\n"
"# was correctly perceived and interpreted.\n"
"#\n"
"# For instance, a 'waving' gesture could be interpreted as an implicit request\n"
"# from a user for the robot to greet back or engage. As this interpretation is\n"
"# not certain, the confidence of the intent may be below 1.0.\n"
"float32 confidence\n"
;
  }

  static const char* value(const ::hri_actions_msgs::Intent_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hri_actions_msgs::Intent_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.intent);
      stream.next(m.data);
      stream.next(m.source);
      stream.next(m.modality);
      stream.next(m.priority);
      stream.next(m.confidence);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Intent_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hri_actions_msgs::Intent_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hri_actions_msgs::Intent_<ContainerAllocator>& v)
  {
    s << indent << "intent: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.intent);
    s << indent << "data: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.data);
    s << indent << "source: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.source);
    s << indent << "modality: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.modality);
    s << indent << "priority: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.priority);
    s << indent << "confidence: ";
    Printer<float>::stream(s, indent + "  ", v.confidence);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HRI_ACTIONS_MSGS_MESSAGE_INTENT_H
