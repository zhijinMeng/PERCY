// Generated by gencpp from file gpt_server/GPTGenerateRequest.msg
// DO NOT EDIT!


#ifndef GPT_SERVER_MESSAGE_GPTGENERATEREQUEST_H
#define GPT_SERVER_MESSAGE_GPTGENERATEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace gpt_server
{
template <class ContainerAllocator>
struct GPTGenerateRequest_
{
  typedef GPTGenerateRequest_<ContainerAllocator> Type;

  GPTGenerateRequest_()
    : request()
    , initialEmotion()
    , finalEmotion()  {
    }
  GPTGenerateRequest_(const ContainerAllocator& _alloc)
    : request(_alloc)
    , initialEmotion(_alloc)
    , finalEmotion(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _request_type;
  _request_type request;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _initialEmotion_type;
  _initialEmotion_type initialEmotion;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _finalEmotion_type;
  _finalEmotion_type finalEmotion;





  typedef boost::shared_ptr< ::gpt_server::GPTGenerateRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gpt_server::GPTGenerateRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GPTGenerateRequest_

typedef ::gpt_server::GPTGenerateRequest_<std::allocator<void> > GPTGenerateRequest;

typedef boost::shared_ptr< ::gpt_server::GPTGenerateRequest > GPTGenerateRequestPtr;
typedef boost::shared_ptr< ::gpt_server::GPTGenerateRequest const> GPTGenerateRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gpt_server::GPTGenerateRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gpt_server::GPTGenerateRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gpt_server::GPTGenerateRequest_<ContainerAllocator1> & lhs, const ::gpt_server::GPTGenerateRequest_<ContainerAllocator2> & rhs)
{
  return lhs.request == rhs.request &&
    lhs.initialEmotion == rhs.initialEmotion &&
    lhs.finalEmotion == rhs.finalEmotion;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gpt_server::GPTGenerateRequest_<ContainerAllocator1> & lhs, const ::gpt_server::GPTGenerateRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gpt_server

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::gpt_server::GPTGenerateRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gpt_server::GPTGenerateRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gpt_server::GPTGenerateRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gpt_server::GPTGenerateRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gpt_server::GPTGenerateRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gpt_server::GPTGenerateRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gpt_server::GPTGenerateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "977d7afd53a96949311a6417ee08cfe0";
  }

  static const char* value(const ::gpt_server::GPTGenerateRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x977d7afd53a96949ULL;
  static const uint64_t static_value2 = 0x311a6417ee08cfe0ULL;
};

template<class ContainerAllocator>
struct DataType< ::gpt_server::GPTGenerateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gpt_server/GPTGenerateRequest";
  }

  static const char* value(const ::gpt_server::GPTGenerateRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gpt_server::GPTGenerateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string request\n"
"string initialEmotion\n"
"string finalEmotion\n"
;
  }

  static const char* value(const ::gpt_server::GPTGenerateRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gpt_server::GPTGenerateRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.request);
      stream.next(m.initialEmotion);
      stream.next(m.finalEmotion);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GPTGenerateRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gpt_server::GPTGenerateRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gpt_server::GPTGenerateRequest_<ContainerAllocator>& v)
  {
    s << indent << "request: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.request);
    s << indent << "initialEmotion: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.initialEmotion);
    s << indent << "finalEmotion: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.finalEmotion);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GPT_SERVER_MESSAGE_GPTGENERATEREQUEST_H
