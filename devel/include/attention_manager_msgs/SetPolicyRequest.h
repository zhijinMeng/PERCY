// Generated by gencpp from file attention_manager_msgs/SetPolicyRequest.msg
// DO NOT EDIT!


#ifndef ATTENTION_MANAGER_MSGS_MESSAGE_SETPOLICYREQUEST_H
#define ATTENTION_MANAGER_MSGS_MESSAGE_SETPOLICYREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace attention_manager_msgs
{
template <class ContainerAllocator>
struct SetPolicyRequest_
{
  typedef SetPolicyRequest_<ContainerAllocator> Type;

  SetPolicyRequest_()
    : policy(0)
    , frame()  {
    }
  SetPolicyRequest_(const ContainerAllocator& _alloc)
    : policy(0)
    , frame(_alloc)  {
  (void)_alloc;
    }



   typedef int8_t _policy_type;
  _policy_type policy;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _frame_type;
  _frame_type frame;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(DISABLED)
  #undef DISABLED
#endif
#if defined(_WIN32) && defined(RANDOM)
  #undef RANDOM
#endif
#if defined(_WIN32) && defined(IDLE_SOCIAL)
  #undef IDLE_SOCIAL
#endif
#if defined(_WIN32) && defined(FOCUSED_SOCIAL)
  #undef FOCUSED_SOCIAL
#endif
#if defined(_WIN32) && defined(STATUS)
  #undef STATUS
#endif

  enum {
    DISABLED = 0,
    RANDOM = 1,
    IDLE_SOCIAL = 2,
    FOCUSED_SOCIAL = 3,
  };

  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> STATUS;

  typedef boost::shared_ptr< ::attention_manager_msgs::SetPolicyRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::attention_manager_msgs::SetPolicyRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetPolicyRequest_

typedef ::attention_manager_msgs::SetPolicyRequest_<std::allocator<void> > SetPolicyRequest;

typedef boost::shared_ptr< ::attention_manager_msgs::SetPolicyRequest > SetPolicyRequestPtr;
typedef boost::shared_ptr< ::attention_manager_msgs::SetPolicyRequest const> SetPolicyRequestConstPtr;

// constants requiring out of line definition

   

   

   

   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      SetPolicyRequest_<ContainerAllocator>::STATUS =
        
          "status"
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::attention_manager_msgs::SetPolicyRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::attention_manager_msgs::SetPolicyRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::attention_manager_msgs::SetPolicyRequest_<ContainerAllocator1> & lhs, const ::attention_manager_msgs::SetPolicyRequest_<ContainerAllocator2> & rhs)
{
  return lhs.policy == rhs.policy &&
    lhs.frame == rhs.frame;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::attention_manager_msgs::SetPolicyRequest_<ContainerAllocator1> & lhs, const ::attention_manager_msgs::SetPolicyRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace attention_manager_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::attention_manager_msgs::SetPolicyRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::attention_manager_msgs::SetPolicyRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::attention_manager_msgs::SetPolicyRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::attention_manager_msgs::SetPolicyRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::attention_manager_msgs::SetPolicyRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::attention_manager_msgs::SetPolicyRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::attention_manager_msgs::SetPolicyRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bd986eb9213a50852c4f5cc8e18a7f55";
  }

  static const char* value(const ::attention_manager_msgs::SetPolicyRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbd986eb9213a5085ULL;
  static const uint64_t static_value2 = 0x2c4f5cc8e18a7f55ULL;
};

template<class ContainerAllocator>
struct DataType< ::attention_manager_msgs::SetPolicyRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "attention_manager_msgs/SetPolicyRequest";
  }

  static const char* value(const ::attention_manager_msgs::SetPolicyRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::attention_manager_msgs::SetPolicyRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# the attention manager will not control the robot's focus of attention\n"
"int8 DISABLED=0\n"
"\n"
"# randomly look around, with short fixations\n"
"int8 RANDOM=1\n"
"\n"
"# the robot will look around for faces, with fixations on detected faces\n"
"int8 IDLE_SOCIAL=2\n"
"\n"
"# focus the robot's attention on a specific frame (typically, a person),\n"
"# provided as the `frame` parameter. If not `frame` parameter is set, the\n"
"# attention manager will focus on the last tracked frame (if any)\n"
"int8 FOCUSED_SOCIAL=3\n"
"\n"
"string STATUS=status\n"
"\n"
"int8 policy\n"
"\n"
"# only used for policies that expect a specific focus on attention\n"
"string frame\n"
"\n"
;
  }

  static const char* value(const ::attention_manager_msgs::SetPolicyRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::attention_manager_msgs::SetPolicyRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.policy);
      stream.next(m.frame);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetPolicyRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::attention_manager_msgs::SetPolicyRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::attention_manager_msgs::SetPolicyRequest_<ContainerAllocator>& v)
  {
    s << indent << "policy: ";
    Printer<int8_t>::stream(s, indent + "  ", v.policy);
    s << indent << "frame: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.frame);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ATTENTION_MANAGER_MSGS_MESSAGE_SETPOLICYREQUEST_H
