# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from hri_actions_msgs/FaceOverlayActionGoal.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import actionlib_msgs.msg
import genpy
import hri_actions_msgs.msg
import std_msgs.msg

class FaceOverlayActionGoal(genpy.Message):
  _md5sum = "78d0b7ac0365fccb3f0b83dca8858497"
  _type = "hri_actions_msgs/FaceOverlayActionGoal"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalID goal_id
FaceOverlayGoal goal

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: actionlib_msgs/GoalID
# The stamp should store the time at which this goal was requested.
# It is used by an action server when it tries to preempt all
# goals that were requested before a certain time
time stamp

# The id provides a way to associate feedback and
# result message with specific goal requests. The id
# specified must be unique.
string id


================================================================================
MSG: hri_actions_msgs/FaceOverlayGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


# URL of the picture/animation to overlay on the face; currently only supports
# absolute local path
string media_url

# duration, in seconds, of the overlay visibility
# - if the duration is larger than the duration of the animation, the animation
# will loop.
# - a duration of 0 means 'forever'. In this case, the action *will never
# complete* on its own. Cancelling the action will remove the overlay from the
# face.
float32 duration


###############################################
## LAYER

# display the image in the background (the eye's iris/pupil will be drawn on
# top of the overlay
uint8 BACKGROUND=0
# display the image on top of the eye (the eye's iris/pupil will be occluded by
# the image, except where transparent)
uint8 FOREGROUND=1

# one of BACKGROUND or FOREGROUND
uint8 layer

###############################################
## LAYOUT

# extend the provided image to cover both eyes.
# Note: this typically is the only sensible option for robot with a single face panel
uint8 EXTEND=0
# on robots with 2 panels (one per eye), copy the provided image onto each eye
uint8 COPY=1
#  on robots with 2 panels (one per eye), mirror the provided image onto each eyes (symmetry over the vertical axis)
uint8 MIRROR=2
# on robots with 2 panels (one per eye), only display the image on the left eye
uint8 LEFT_EYE_ONLY=3
# on robots with 2 panels (one per eye), only display the image on the right eye
uint8 RIGHT_EYE_ONLY=4

# one of the layout constant defined above
uint8 layout


# scale of the image: 1.0 (default) means full width of the face/eye (depending
# on the chosen layout); 0.1 means 10% of the width.
# Note that any value <= 0.0 is ignored (replaced by 1.0)
float32 scale

# position offset, expressed as a proportion of the face or eye's width/height. Values
# in [-1.0, 1.0] range.
#
# (0.0, 0.0) means that the image is centered with the face/eye
# (-1.0, 1.0) means that the image's center would be located in the top left
# corner of the face/eye panel.
float32 offset_x
float32 offset_y

###############################################
## EFFECTS

# if true, the overlay will fade in/fade out
bool fade

"""
  __slots__ = ['header','goal_id','goal']
  _slot_types = ['std_msgs/Header','actionlib_msgs/GoalID','hri_actions_msgs/FaceOverlayGoal']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,goal_id,goal

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FaceOverlayActionGoal, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.goal_id is None:
        self.goal_id = actionlib_msgs.msg.GoalID()
      if self.goal is None:
        self.goal = hri_actions_msgs.msg.FaceOverlayGoal()
    else:
      self.header = std_msgs.msg.Header()
      self.goal_id = actionlib_msgs.msg.GoalID()
      self.goal = hri_actions_msgs.msg.FaceOverlayGoal()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.goal_id.stamp.secs, _x.goal_id.stamp.nsecs))
      _x = self.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.goal.media_url
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_f2B3fB().pack(_x.goal.duration, _x.goal.layer, _x.goal.layout, _x.goal.scale, _x.goal.offset_x, _x.goal.offset_y, _x.goal.fade))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.goal_id is None:
        self.goal_id = actionlib_msgs.msg.GoalID()
      if self.goal is None:
        self.goal = hri_actions_msgs.msg.FaceOverlayGoal()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.goal_id.stamp.secs, _x.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.goal_id.id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.media_url = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.goal.media_url = str[start:end]
      _x = self
      start = end
      end += 19
      (_x.goal.duration, _x.goal.layer, _x.goal.layout, _x.goal.scale, _x.goal.offset_x, _x.goal.offset_y, _x.goal.fade,) = _get_struct_f2B3fB().unpack(str[start:end])
      self.goal.fade = bool(self.goal.fade)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.goal_id.stamp.secs, _x.goal_id.stamp.nsecs))
      _x = self.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.goal.media_url
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_f2B3fB().pack(_x.goal.duration, _x.goal.layer, _x.goal.layout, _x.goal.scale, _x.goal.offset_x, _x.goal.offset_y, _x.goal.fade))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.goal_id is None:
        self.goal_id = actionlib_msgs.msg.GoalID()
      if self.goal is None:
        self.goal = hri_actions_msgs.msg.FaceOverlayGoal()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.goal_id.stamp.secs, _x.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.goal_id.id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.media_url = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.goal.media_url = str[start:end]
      _x = self
      start = end
      end += 19
      (_x.goal.duration, _x.goal.layer, _x.goal.layout, _x.goal.scale, _x.goal.offset_x, _x.goal.offset_y, _x.goal.fade,) = _get_struct_f2B3fB().unpack(str[start:end])
      self.goal.fade = bool(self.goal.fade)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_f2B3fB = None
def _get_struct_f2B3fB():
    global _struct_f2B3fB
    if _struct_f2B3fB is None:
        _struct_f2B3fB = struct.Struct("<f2B3fB")
    return _struct_f2B3fB
